import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.io.FileNotFoundException;

public class BackendTests {

    /**
     * Tests cases where readData works and doesn't work
     */
    @Test
    public void roleTest1(){

        String fileName = "roon"; // cannot read from this file because it isn't .csv
        IterableSortedCollection<Song> tree = new Tree_Placeholder();
        BackendInterface end = new Backend(tree);
        try {
            end.readData(fileName);
            // An exception should be thrown, otherwise it will fail
	    System.out.println("No ecxheiuptiomn thronw!");
            Assertions.assertTrue(false,"no exception thrown");
        }
        catch (IOException e) {
            //throws an IOException
            Assertions.assertTrue(true);
        }
        catch (Exception e) {
            // Won't throw any other exceptions
	    System.out.println("Other ecxheiuptiomn thronw!");
            Assertions.assertTrue(false,"other no exception thrown");
        }

        // file should exist
        String fileName2 = "songs.csv";
        IterableSortedCollection<Song> tree2 = new Tree_Placeholder();
        BackendInterface end2 = new Backend(tree2);
        // should execute as intended
        try {
            end2.readData(fileName2);
            Assertions.assertTrue(true);
        }
        // should not catch any exceptions
        catch(FileNotFoundException fnfe){
		Assertions.assertTrue(false, "HELLO HAROON");	
	} catch (Exception e) {
            	//Assertions.assertTrue(false, );
		Assertions.assertTrue(false, e.getClass().getName());
        }
    }

    /**
     * Tests cases where getRange works and doesn't work
     */
    @Test
    public void roleTest2() {

        //case 1 where the method should not work

        String fileName = "songs.csv";
        IterableSortedCollection<Song> tree = new Tree_Placeholder();
        BackendInterface end = new Backend(tree);
        try {
            end.readData(fileName);
        }
        // should not throw an exception
        catch (Exception e) {
            Assertions.assertTrue(false);
        }

        // bad ordered parameters should return null with none being found in range
        Assertions.assertTrue(end.getRange(20, 10).size() == 0);
	//Assertions.assertTrue(false);

        // Case 2 where the method should work

        String fileName2 = "songs.csv";
        IterableSortedCollection<Song> tree2 = new Tree_Placeholder();
        BackendInterface end2 = new Backend(tree2);

        try {
            end2.readData(fileName2);
        }
        // should not throw an exception
        catch (Exception e) {
            Assertions.assertTrue(false);
        }
	List<String> returnedSongs = end2.getRange(0, 3);
	String[] expectedSongs = {
                "Time",
                "Circles",
                "Wow",
                "Baby Im Back",
        };
	// ensure that all songs returned are as expected
	Assertions.assertEquals(returnedSongs.get(i), 4);
	for (int i = 0; i < expectedSongs.length; i++) { 
            Assertions.assertEquals(returnedSongs.get(i), expectedSongs[i]);
        }
        // Case 3 where the method should not work and is out of bounds
        String fileName3 = "songs.csv";
        IterableSortedCollection<Song> tree3 = new Tree_Placeholder();
        BackendInterface end3 = new Backend(tree3);
        try {
            end3.readData(fileName3);
        }
        // should not throw an exception
        catch (Exception e) {
            Assertions.assertTrue(false);
        }


        List<String> returnedSongs2 = end3.getRange(95, 9999);
        String[] expectedSongs2 = {
                "Shooting Stars",
                "Faded",
                "Feel it"
        };
        // ensure correct songs returned
        for (int i = 0; i < expectedSongs2.length; i++) { 
            Assertions.assertEquals(returnedSongs2.get(i), expectedSongs2[i]);
        }

    }


    /**
     * Tests cases that check the functionality of the setFilter and fiveMost methods
     */
    @Test
    public void roleTest3(){

        IterableSortedCollection<Song> tree = new Tree_Placeholder();
        BackendInterface end = new Backend(tree);

        //list of songs
        Song[] songs = {
                new Song("Time", "Artist1", "genre1", 2020, 120, 75, 85, -5, 20),
                new Song("Circles", "Artist2", "genre2", 2019, 110, 65, 75, -6, 15),
                new Song("Wow", "Artist3", "genre3", 2018, 130, 80, 90, -4, 25),
                new Song("Baby I'm Back", "Artist4", "genre4", 2023, 115, 70, 80, -5, 18),
                new Song("Shooting Stars", "Artist5", "genre5", 2017, 125, 85, 95, -3, 30),
                new Song("Faded", "Artist6", "genre6", 2016, 105, 60, 70, -7, 10),
                new Song("Feel It", "Artist7", "genre7", 2024, 135, 90, 100, -2, 35)
        };

        //inserting the songs into the tree
        for (Song song : songs) {
            tree.insert(song);
        }

        //test the setFilter method
        List<String> filteredSongs = end.setFilter(80);
        Assertions.assertFalse(filteredSongs.isEmpty(), "Filtered songs should not be empty");
        Assertions.assertTrue(filteredSongs.contains("Wow"), "Wow should be in filtered songs");
        Assertions.assertTrue(filteredSongs.contains("Shooting Stars"), "Shooting Stars should be " +
                "in filtered songs");
        Assertions.assertTrue(filteredSongs.contains("Feel It"), "Feel It should be " +
                "in filtered songs");

        //test with null threshold which should clear the filter
        List<String> allSongs = end.setFilter(null);
        Assertions.assertEquals(7, allSongs.size(), "Filter was cleared so the songs must return");

        //test getRange to see if it works with setFilter
        end.setFilter(80);
        List<String> rangeSongs = end.getRange(70, 85);

        Assertions.assertEquals(2, rangeSongs.size(), "Should return 2 songs because " +
                "of the range and filter");
        Assertions.assertTrue(rangeSongs.contains("Wow"), "Wow should be in range songs");
        Assertions.assertTrue(rangeSongs.contains("Shooting Stars"), "Shooting Stars should " +
                "be in range songs");

        //test the fiveMost method
        List<String> recentSongs = end.fiveMost();

        Assertions.assertEquals(3, recentSongs.size(), "fiveMost should return 3 songs");

        Assertions.assertTrue(recentSongs.contains("Wow"), "Wow should be in recent songs");
        Assertions.assertTrue(recentSongs.contains("Shooting Stars"), "Shooting Stars should be" +
                " in recent songs");
        Assertions.assertTrue(recentSongs.contains("Feel It"), "Feel It should be" +
                " in recent songs");

        //test which should return an empty list because of the filter value
        end.setFilter(101);
        List<String> noSongs = end.fiveMost();

        Assertions.assertTrue(noSongs.isEmpty(), "fiveMost " +
                "should return empty list");

        //test fiveMost with null
        end.setFilter(null);
        end.getRange(null, null);

        List<String> allRecentSongs = end.fiveMost();
        Assertions.assertEquals(5, allRecentSongs.size(), "fiveMost should return 5 songs");

        // check that fiveMost returns the most recent songs

        Assertions.assertTrue(allRecentSongs.contains("Feel It"), "Wow should be in recent songs");
        Assertions.assertTrue(allRecentSongs.contains("Baby I'm Back"), "Shooting Stars should be" +
                " in recent songs");
        Assertions.assertTrue(allRecentSongs.contains("Time"), "Feel It should be" +
                " in recent songs");
        Assertions.assertTrue(allRecentSongs.contains("Circles"), "Feel It should be" +
                " in recent songs");
        Assertions.assertTrue(allRecentSongs.contains("Wow"), "Feel It should be" +
                " in recent songs");
    }
}
